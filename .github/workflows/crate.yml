name: Crate

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-Dwarnings"
  GRCOV_VERSION: "v0.8.19"

jobs:
  clippy-rustfmt:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable with clippy and rustfmt
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt --check

      - name: Check for clippy lints
        run: cargo clippy --all-targets --all-features

  run-tests:
    runs-on: ubuntu-22.04
    needs: clippy-rustfmt

    strategy:
      matrix:
        feature-flag:
          - ""
          - "-F serialize"
          - "-F tracing"
          - "-F serialize, tracing"

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Run tests
        run: cargo test ${{ matrix.feature-flag }}

  run-tests-wasm:
    runs-on: ubuntu-22.04
    needs: clippy-rustfmt

    strategy:
      matrix:
        feature-flag:
          - ""
          - "-F serialize"
          - "-F tracing"
          - "-F serialize, tracing"

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust stable with wasm target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        uses: taiki-e/install-action@v2
        with:
          tool: wasm-pack

      # Chrome and Firefox come preinstalled on the runner images
      - name: Run tests
        run: >
          wasm-pack test
          --headless --chrome --firefox
          -F wasm
          ${{ matrix.feature-flag }}

  miri:
    runs-on: ubuntu-22.04
    needs: clippy-rustfmt

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust nightly and miri
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: miri, rust-src

    - name: Run miri
      env:
        RUSTFLAGS: -Zrandomize-layout
        MIRIFLAGS: -Zmiri-symbolic-alignment-check
      run: cargo miri test

  code-coverage:
    runs-on: ubuntu-22.04
    needs: run-tests

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust stable and LLVM tools
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install grcov
      run: |
        curl -L "https://github.com/mozilla/grcov/releases/download/$GRCOV_VERSION/grcov-x86_64-unknown-linux-musl.tar.bz2" | \
        tar xj -C "$HOME/.cargo/bin"

    - name: Run tests
      env:
        LLVM_PROFILE_FILE: "v_frame-%p-%m.profraw"
        RUSTFLAGS: >
          -Cinstrument-coverage -Ccodegen-units=1 -Clink-dead-code
          -Coverflow-checks=off
        RUSTDOCFLAGS: >
          -Cinstrument-coverage -Ccodegen-units=1 -Clink-dead-code
          -Coverflow-checks=off
      run: cargo test
    - name: Get coverage data for codecov
      run: |
        grcov . --binary-path ./target/debug/ -s . -t lcov --branch \
              --ignore-not-existing --ignore "/*" --ignore "../*" -o lcov.info
    - name: Codecov upload
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: lcov.info
